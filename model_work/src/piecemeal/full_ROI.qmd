---
title: "Model Story"
format: html
editor: source
---

# Ectomycorrhizal mutualist networks and their influence on system outcomes

```{r, message=FALSE, echo = FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(here)
library(gganimate)
library(gifski)
library(viridis)
library(viridisLite)
library(plotly)
library(latex2exp)

b.color = "#85A389"
n.color = "#A2CDB0"
f.color = "#F1C27B"

prim.color = "#3b78a3"
alt.color = "#bd4665"

log.max = function(x){
  case_when(
    log(x) > 5 ~ 5,
    log(x) < -5 ~ -5,
    .default = log(x)
  )
}
```

# Full ROI

## One tree - one fungus

```{r, echo = FALSE}
#parameter values 
# See two tree two fungus section for a full annotation of what each parameter refers to!
tset = seq(from = 0, to = 100, by = 0.01)
a <- 0.25
p1 <- .5
mB1 <- .15
mN1 <- mB1
epsilon <- 0.15
mF1 <- 0.1
u1 <- .25
N0 <- 100

#holding vectors and initial conditions
b1.set = rep(NaN, length(tset)); b1.set[1] <- 65
n1.set = rep(NaN, length(tset)); n1.set[1] <- b1.set[1]*0.5
f1.set = rep(NaN, length(tset)); f1.set[1] <- b1.set[1]*0.15
e.set = rep(NaN, length(tset));  e.set[1]  <- 100 - n1.set[1]

for(i in 2:length(tset)){
  dt <- tset[i]-tset[i-1]
  B1 <- b1.set[i-1];  N1 <- n1.set[i-1]; F1 <- f1.set[i-1]; E <- e.set[i-1]

  dB1 <- (p1*N1 - (a+mB1)*B1)*dt
  dN1 <- (E*(u1*F1) - mN1*N1)*dt
  dF1 <- ((a*B1)*epsilon - mF1*F1)*dt

  
b1.set[i] <- B1 + dB1;n1.set[i] <- N1 + dN1;f1.set[i] <- F1 + dF1;e.set[i] <- E - (dN1)}
```

```{r, echo = FALSE}
sim.1t1f = tibble(time = tset) %>% 
  mutate(b1 = b1.set)%>% 
  mutate(n1 = n1.set)%>% 
  mutate(f1 = f1.set)%>% 
  mutate(e = e.set)  

long.1t1f = sim.1t1f %>% 
  select(time:f1) %>% 
  pivot_longer(cols = b1:f1, names_to = "pool", values_to = 'size') %>% 
  mutate(rep = str_sub(pool, 2,2)) %>% 
  mutate(pool = str_sub(pool, 1,1)) %>%
  group_by(pool, rep) %>% 
 slice(which(row_number() %% 51 == 1)) 

plot.1t1f = 
  ggplot(long.1t1f, aes(x = time, y = size, color = pool))+
  geom_line(aes(linetype = rep), size = 1.5)+
  labs(x = "Time (yrs)", y = "Pool Size")+
  scale_color_manual(name = "", breaks = c("b", "n", "f"), labels = c("Host biomass", "Host nitrogen", "Fungal biomass"), values = c(b.color, n.color, f.color))+
  theme_classic()+guides(linetype = "none")#+transition_reveal(time)

 # animate(plot.1t1f, duration = 5, renderer = gifski_renderer(loop = FALSE), 
 #         height = 5, width = 7, units = "in", res = 300)
# anim_save(here("esa", "plot2t2f.gif"))

plot.1t1f
```

## Two trees - one fungus

```{r, echo = FALSE}
primary.weight = 0.500
#parameter values
tset = seq(from = 0, to = 5000, by = 0.01)
a <- 0.25
p1 <- .5
p2 <- p1
mB1 <- .15
mB2 <- .15
mN1 <- mB1
mN2 <- mB2
epsilon <- 0.15
mF1 <- 0.1
u1 <- .25
s11 <- primary.weight
s12 <- 1-s11
N0 <- 100
l = 0

#holding vectors and initial conditions
b1.set = rep(NaN, length(tset)); b1.set[1] <- 75
b2.set = rep(NaN, length(tset)); b2.set[1] <- 55
n1.set = rep(NaN, length(tset)); n1.set[1] <- b1.set[1]*0.5
n2.set = rep(NaN, length(tset)); n2.set[1] <- b2.set[1]*0.5
f1.set = rep(NaN, length(tset)); f1.set[1] <- b1.set[1]*0.15
e.set = rep(NaN, length(tset));  e.set[1]  <- 100 - n1.set[1]-n2.set[1]

#historical sharing percentages based on relative size of each 
f1n1.set = rep(NaN, length(tset)); f1n1.set[1] <- b1.set[1]/(b1.set[1]+b2.set[1])
f1n2.set = rep(NaN, length(tset)); f1n2.set[1] <- b2.set[1]/(b1.set[1]+b2.set[1])

for(i in 2:length(tset)){
  dt <- tset[i]-tset[i-1]
  B1 <- b1.set[i-1];  N1 <- n1.set[i-1]; F1 <- f1.set[i-1]
  B2 <- b2.set[i-1];  N2 <- n2.set[i-1]; E  <- e.set[i-1]
  f1ton1 <- f1n1.set[i-1]; f1ton2 <- f1n2.set[i-1]
  
  dB1 <- (p1 * N1 - (a + mB1)*B1)*dt
  dN1 <- (E*(u1*F1*f1ton1)-mN1*N1)*dt
  dB2 <- (p2 * N2 - (a + mB2)*B2)*dt
  dN2 <- (E*(u1*F1*f1ton2)-mN2*N2)*dt
  dF1 <- ((a*B1*(1-l)+l*a*B1)*epsilon+(a*B2*(1-l)+l*a*B2)*epsilon-mF1*F1)*dt
  
f1ton1.new <- s11*(a*B1*(1-l)+l*a*B1)/(s11*(a*B1*(1-l)+l*a*B1)+s12*(a*B2*(1-l)+l*a*B2))
f1ton2.new <- s12*(a*B2*(1-l)+l*a*B2)/(s11*(a*B1*(1-l)+l*a*B1)+s12*(a*B2*(1-l)+l*a*B2))

b1.set[i] <- B1 + dB1;n1.set[i] <- N1 + dN1;f1.set[i] <- F1 + dF1
b2.set[i] <- B2 + dB2;n2.set[i] <- N2 + dN2;e.set[i] <- E - (dN1)
  
f1n1.set[i]<- f1ton1.new;f1n2.set[i]<- f1ton2.new
}
```

```{r, echo = FALSE}
sim.2t1f = tibble(time = tset) %>% 
  mutate(b1 = b1.set)%>% 
  mutate(b2 = b2.set)%>% 
  mutate(n1 = n1.set)%>% 
  mutate(n2 = n2.set) %>% 
  mutate(f1 = f1.set)%>% 
  mutate(e = e.set) %>%
  mutate(f1n1 = f1n1.set)%>% 
  mutate(f1n2 = f1n2.set)

long.2t1f = sim.2t1f %>% 
  select(time:f1) %>% 
  pivot_longer(cols = b1:f1, names_to = "pool", values_to = 'size') %>% 
  mutate(rep = str_sub(pool, 2,2)) %>% 
  mutate(pool = str_sub(pool, 1,1)) %>%
  group_by(pool, rep) %>% 
 slice(which(row_number() %% 501 == 1)) %>% 
  mutate(rep = case_when(
    rep == "1" ~ "Host/Fungus 1",
    rep == "2" ~ "Host/Fungus 2"
  ))

trade.2t1f = sim.2t1f %>% 
  select(time, f1n1:f1n2) %>% 
  pivot_longer(cols = f1n1:f1n2, names_to = "exchange", values_to = 'percent') %>% 
  mutate(from.pool = str_sub(exchange, 1,1))%>% 
  mutate(from.rep = str_sub(exchange, 2,2))%>% 
  mutate(to.pool = str_sub(exchange, 3,3))%>% 
  mutate(to.rep = str_sub(exchange, 4,4))%>%
  group_by(from.pool, from.rep)   %>% 
 slice(which(row_number() %% 501 == 1)) %>% 
  mutate(primary = case_when(
    from.rep == to.rep ~"primary",
    from.rep != to.rep ~"alternate")) 


plot.2t1f = 
  ggplot(long.2t1f, aes(x = time, y = size, color = pool))+
  geom_line(aes(linetype = rep), size = 1.5)+ 
  facet_wrap(~rep)+
  labs(x = "Time", y = "Pool Size", title = "Different Initial Conditions")+
  scale_color_manual(name = "", breaks = c("b", "n", "f"), labels = c("Host biomass", "Host nitrogen", "Fungal biomass"), values = c(b.color, n.color, f.color))+
  theme_classic()+guides(linetype = "none")

plot.2t1f

ggtrade.2t1f = 
  ggplot(trade.2t1f, aes(x = time, y = percent, color = primary))+
  geom_line( size = 1, linetype = "solid")+ 
  facet_grid(cols = vars(from.pool), rows = vars(from.rep))+
  labs(x = "Time", y = "Percent allocation")+
  theme_classic()+
  lims(y = c(0,1))+
  scale_color_manual(name = "", breaks = c("primary", "alternate"), labels = c("Preferred partner", "Alternate partner"), values = c(prim.color, alt.color))+
  labs(title = "Percent of resources allocated to each host")

ggtrade.2t1f


```

```{r, echo = FALSE}
primary.weight = 0.5500
#parameter values
tset = seq(from = 0, to = 5000, by = 0.01)
a <- 0.25
p1 <- .5
p2 <- p1
mB1 <- .15
mB2 <- .15
mN1 <- mB1
mN2 <- mB2
epsilon <- 0.15
mF1 <- 0.1
u1 <- .25
s11 <- primary.weight
s12 <- 1-s11
N0 <- 100
l = 0

#holding vectors and initial conditions
b1.set = rep(NaN, length(tset)); b1.set[1] <- 50
b2.set = rep(NaN, length(tset)); b2.set[1] <- 50
n1.set = rep(NaN, length(tset)); n1.set[1] <- b1.set[1]*0.5
n2.set = rep(NaN, length(tset)); n2.set[1] <- b2.set[1]*0.5
f1.set = rep(NaN, length(tset)); f1.set[1] <- b1.set[1]*0.15
e.set = rep(NaN, length(tset));  e.set[1]  <- 100 - n1.set[1]-n2.set[1]

#historical sharing percentages based on relative size of each 
f1n1.set = rep(NaN, length(tset)); f1n1.set[1] <- b1.set[1]/(b1.set[1]+b2.set[1])
f1n2.set = rep(NaN, length(tset)); f1n2.set[1] <- b2.set[1]/(b1.set[1]+b2.set[1])

for(i in 2:length(tset)){
  dt <- tset[i]-tset[i-1]
  B1 <- b1.set[i-1];  N1 <- n1.set[i-1]; F1 <- f1.set[i-1]
  B2 <- b2.set[i-1];  N2 <- n2.set[i-1]; E  <- e.set[i-1]
  f1ton1 <- f1n1.set[i-1]; f1ton2 <- f1n2.set[i-1]
  
  dB1 <- (p1 * N1 - (a + mB1)*B1)*dt
  dN1 <- (E*(u1*F1*f1ton1)-mN1*N1)*dt
  dB2 <- (p2 * N2 - (a + mB2)*B2)*dt
  dN2 <- (E*(u1*F1*f1ton2)-mN2*N2)*dt
  dF1 <- ((a*B1*(1-l)+l*a*B1)*epsilon+(a*B2*(1-l)+l*a*B2)*epsilon-mF1*F1)*dt
  
f1ton1.new <- s11*(a*B1*(1-l)+l*a*B1)/(s11*(a*B1*(1-l)+l*a*B1)+s12*(a*B2*(1-l)+l*a*B2))
f1ton2.new <- s12*(a*B2*(1-l)+l*a*B2)/(s11*(a*B1*(1-l)+l*a*B1)+s12*(a*B2*(1-l)+l*a*B2))

b1.set[i] <- B1 + dB1;n1.set[i] <- N1 + dN1;f1.set[i] <- F1 + dF1
b2.set[i] <- B2 + dB2;n2.set[i] <- N2 + dN2;e.set[i] <- E - (dN1)
  
f1n1.set[i]<- f1ton1.new;f1n2.set[i]<- f1ton2.new
}
```

```{r, echo = FALSE}
sim.2t1f = tibble(time = tset) %>% 
  mutate(b1 = b1.set)%>% 
  mutate(b2 = b2.set)%>% 
  mutate(n1 = n1.set)%>% 
  mutate(n2 = n2.set) %>% 
  mutate(f1 = f1.set)%>% 
  mutate(e = e.set) %>%
  mutate(f1n1 = f1n1.set)%>% 
  mutate(f1n2 = f1n2.set)

long.2t1f = sim.2t1f %>% 
  select(time:f1) %>% 
  pivot_longer(cols = b1:f1, names_to = "pool", values_to = 'size') %>% 
  mutate(rep = str_sub(pool, 2,2)) %>% 
  mutate(pool = str_sub(pool, 1,1)) %>%
  group_by(pool, rep) %>% 
 slice(which(row_number() %% 501 == 1)) %>% 
  mutate(rep = case_when(
    rep == "1" ~ "Host/Fungus 1",
    rep == "2" ~ "Host/Fungus 2"
  ))

trade.2t1f = sim.2t1f %>% 
  select(time, f1n1:f1n2) %>% 
  pivot_longer(cols = f1n1:f1n2, names_to = "exchange", values_to = 'percent') %>% 
  mutate(from.pool = str_sub(exchange, 1,1))%>% 
  mutate(from.rep = str_sub(exchange, 2,2))%>% 
  mutate(to.pool = str_sub(exchange, 3,3))%>% 
  mutate(to.rep = str_sub(exchange, 4,4))%>%
  group_by(from.pool, from.rep)   %>% 
 slice(which(row_number() %% 501 == 1)) %>% 
  mutate(primary = case_when(
    from.rep == to.rep ~"primary",
    from.rep != to.rep ~"alternate")) 


plot.2t1f = 
  ggplot(long.2t1f, aes(x = time, y = size, color = pool))+
  geom_line(aes(linetype = rep), size = 1.5)+ 
  facet_wrap(~rep)+
  labs(x = "Time", y = "Pool Size", title = "Preference for one host over the other")+
  scale_color_manual(name = "", breaks = c("b", "n", "f"), labels = c("Host biomass", "Host nitrogen", "Fungal biomass"), values = c(b.color, n.color, f.color))+
  theme_classic()+guides(linetype = "none")

plot.2t1f

ggtrade.2t1f = 
  ggplot(trade.2t1f, aes(x = time, y = percent, color = primary))+
  geom_line( size = 1, linetype = "solid")+ 
  facet_grid(cols = vars(from.pool), rows = vars(from.rep))+
  labs(x = "Time", y = "Percent allocation")+
  theme_classic()+
  lims(y = c(0,1))+
  scale_color_manual(name = "", breaks = c("primary", "alternate"), labels = c("Preferred partner", "Alternate partner"), values = c(prim.color, alt.color))+
  labs(title = "Percent of resources allocated to each host")

ggtrade.2t1f


```

```{r, echo = FALSE}
primary.weight = 0.5500
#parameter values
tset = seq(from = 0, to = 5000, by = 0.01)
a <- 0.25
p1 <- .5
p2 <- p1
mB1 <- .15
mB2 <- .15
mN1 <- mB1
mN2 <- mB2
epsilon <- 0.15
mF1 <- 0.1
u1 <- .25
s11 <- primary.weight
s12 <- 1-s11
N0 <- 100
l = 0

#holding vectors and initial conditions
b1.set = rep(NaN, length(tset)); b1.set[1] <- 25
b2.set = rep(NaN, length(tset)); b2.set[1] <- 75
n1.set = rep(NaN, length(tset)); n1.set[1] <- b1.set[1]*0.5
n2.set = rep(NaN, length(tset)); n2.set[1] <- b2.set[1]*0.5
f1.set = rep(NaN, length(tset)); f1.set[1] <- b1.set[1]*0.15
e.set = rep(NaN, length(tset));  e.set[1]  <- 100 - n1.set[1]-n2.set[1]

#historical sharing percentages based on relative size of each 
f1n1.set = rep(NaN, length(tset)); f1n1.set[1] <- b1.set[1]/(b1.set[1]+b2.set[1])
f1n2.set = rep(NaN, length(tset)); f1n2.set[1] <- b2.set[1]/(b1.set[1]+b2.set[1])

for(i in 2:length(tset)){
  dt <- tset[i]-tset[i-1]
  B1 <- b1.set[i-1];  N1 <- n1.set[i-1]; F1 <- f1.set[i-1]
  B2 <- b2.set[i-1];  N2 <- n2.set[i-1]; E  <- e.set[i-1]
  f1ton1 <- f1n1.set[i-1]; f1ton2 <- f1n2.set[i-1]
  
  dB1 <- (p1 * N1 - (a + mB1)*B1)*dt
  dN1 <- (E*(u1*F1*f1ton1)-mN1*N1)*dt
  dB2 <- (p2 * N2 - (a + mB2)*B2)*dt
  dN2 <- (E*(u1*F1*f1ton2)-mN2*N2)*dt
  dF1 <- ((a*B1*(1-l)+l*a*B1)*epsilon+(a*B2*(1-l)+l*a*B2)*epsilon-mF1*F1)*dt
  
f1ton1.new <- s11*(a*B1*(1-l)+l*a*B1)/(s11*(a*B1*(1-l)+l*a*B1)+s12*(a*B2*(1-l)+l*a*B2))
f1ton2.new <- s12*(a*B2*(1-l)+l*a*B2)/(s11*(a*B1*(1-l)+l*a*B1)+s12*(a*B2*(1-l)+l*a*B2))

b1.set[i] <- B1 + dB1;n1.set[i] <- N1 + dN1;f1.set[i] <- F1 + dF1
b2.set[i] <- B2 + dB2;n2.set[i] <- N2 + dN2;e.set[i] <- E - (dN1)
  
f1n1.set[i]<- f1ton1.new;f1n2.set[i]<- f1ton2.new
}
```

```{r, echo = FALSE}
sim.2t1f = tibble(time = tset) %>% 
  mutate(b1 = b1.set)%>% 
  mutate(b2 = b2.set)%>% 
  mutate(n1 = n1.set)%>% 
  mutate(n2 = n2.set) %>% 
  mutate(f1 = f1.set)%>% 
  mutate(e = e.set) %>%
  mutate(f1n1 = f1n1.set)%>% 
  mutate(f1n2 = f1n2.set)

long.2t1f = sim.2t1f %>% 
  select(time:f1) %>% 
  pivot_longer(cols = b1:f1, names_to = "pool", values_to = 'size') %>% 
  mutate(rep = str_sub(pool, 2,2)) %>% 
  mutate(pool = str_sub(pool, 1,1)) %>%
  group_by(pool, rep) %>% 
 slice(which(row_number() %% 501 == 1)) %>% 
  mutate(rep = case_when(
    rep == "1" ~ "Host/Fungus 1",
    rep == "2" ~ "Host/Fungus 2"
  ))

trade.2t1f = sim.2t1f %>% 
  select(time, f1n1:f1n2) %>% 
  pivot_longer(cols = f1n1:f1n2, names_to = "exchange", values_to = 'percent') %>% 
  mutate(from.pool = str_sub(exchange, 1,1))%>% 
  mutate(from.rep = str_sub(exchange, 2,2))%>% 
  mutate(to.pool = str_sub(exchange, 3,3))%>% 
  mutate(to.rep = str_sub(exchange, 4,4))%>%
  group_by(from.pool, from.rep)   %>% 
 slice(which(row_number() %% 501 == 1)) %>% 
  mutate(primary = case_when(
    from.rep == to.rep ~"primary",
    from.rep != to.rep ~"alternate")) 


plot.2t1f = 
  ggplot(long.2t1f, aes(x = time, y = size, color = pool))+
  geom_line(aes(linetype = rep), size = 1.5)+ 
  facet_wrap(~rep)+
  labs(x = "Time", y = "Pool Size", title = "Different initial conditions and preference != 50%")+
  scale_color_manual(name = "", breaks = c("b", "n", "f"), labels = c("Host biomass", "Host nitrogen", "Fungal biomass"), values = c(b.color, n.color, f.color))+
  theme_classic()+guides(linetype = "none")

plot.2t1f

ggtrade.2t1f = 
  ggplot(trade.2t1f, aes(x = time, y = percent, color = primary))+
  geom_line( size = 1, linetype = "solid")+ 
  facet_grid(cols = vars(from.pool), rows = vars(from.rep))+
  labs(x = "Time", y = "Percent allocation")+
  theme_classic()+
  lims(y = c(0,1))+
  scale_color_manual(name = "", breaks = c("primary", "alternate"), labels = c("Preferred partner", "Alternate partner"), values = c(prim.color, alt.color))+
  labs(title = "Percent of resources allocated to each host")

ggtrade.2t1f


```

Difference in initial conditions will result in uneven populations when preference is 50%. When preference is not 50%, the higher preference host will win out and the other will die. This is irrespective to starting conditions (smaller will win if fungus prefers it).

## One tree - two fungi

```{r, echo = FALSE}
primary.weight = 0.5 # how much preference each member of the network has for it's primary partner (e.g. Fungus 2's preference for Host 2)
#parameter values
tset = seq(from = 0, to = 5000, by = 0.01) # a timeseries to iterate over
a <- 0.25 # host allocation to symbiont
p1 <- .5 # host photosynthetic rate
mB1 <- .15 # host mortality
mN1 <- mB1 # host nitrogen loss rate
r11 <- primary.weight # preference of host 1 for fungus 1
r12 <- 1-r11 # preference of host 1 to fungus 2
epsilon <- 0.15 # fungal conversion efficiency
mF1 <- 0.1 # fungus 1 mortality rate
mF2 <- mF1 # fungus 2 mortality rate
u1 <- .25 # fungus 1 uptake rate
u2 <- .25 # fungus 2 uptake rate
N0 <- 100 # total system nitrogen
l = 0 # percent of tree resources lost from ROI allocation

#holding vectors and initial conditions
b1.set = rep(NaN, length(tset)); b1.set[1] <- 65
b2.set = rep(NaN, length(tset)); b2.set[1] <- 50
n1.set = rep(NaN, length(tset)); n1.set[1] <- b1.set[1]*0.5
n2.set = rep(NaN, length(tset)); n2.set[1] <- b2.set[1]*0.5
f1.set = rep(NaN, length(tset)); f1.set[1] <- b1.set[1]*0.15
f2.set = rep(NaN, length(tset)); f2.set[1] <- b2.set[1]*0.15
e.set = rep(NaN, length(tset));  e.set[1]  <- 100 - n1.set[1]-n2.set[1]

#historical sharing percentages based on relative size of each 
c1f1.set = rep(NaN, length(tset)); c1f1.set[1] <- f1.set[1]/(f1.set[1]+f2.set[1])
c1f2.set = rep(NaN, length(tset)); c1f2.set[1] <- f2.set[1]/(f1.set[1]+f2.set[1])

for(i in 2:length(tset)){
  dt <- tset[i]-tset[i-1]
  B1 <- b1.set[i-1];  N1 <- n1.set[i-1]; F1 <- f1.set[i-1]
                                         F2 <- f2.set[i-1]; E <- e.set[i-1]
  c1tof1 <- c1f1.set[i-1]; c1tof2 <- c1f2.set[i-1]

  dB1 <- (p1 * N1 - (a + mB1)*B1)*dt
  dN1 <- (E*(u1*F1+u2*F2)-mN1*N1)*dt
  
  dF1 <- ((a*B1*c1tof1*(1-l)+l*a*B1*r11)*epsilon-mF1*F1)*dt
  dF2 <- ((a*B1*c1tof2*(1-l)+l*a*B1*r12)*epsilon-mF2*F2)*dt

c1tof1.new <- r11*u1*F1/(r11*u1*F1+r12*u2*F2)
c1tof2.new <- r12*u2*F2/(r11*u1*F1+r12*u2*F2)

b1.set[i] <- B1 + dB1;n1.set[i] <- N1 + dN1;f1.set[i] <- F1 + dF1
                                            f2.set[i] <- F2 + dF2;e.set[i] <- E - (dN1 + dN2)
  
c1f1.set[i]<- c1tof1.new;c1f2.set[i]<- c1tof2.new
}
```

```{r, echo = FALSE}
sim.1t2f = tibble(time = tset) %>% 
  mutate(b1 = b1.set)%>% 
  mutate(n1 = n1.set)%>% 
  mutate(f1 = f1.set)%>% 
  mutate(f2 = f2.set) %>%  
  mutate(e = e.set) %>%
  mutate(c1f1 = c1f1.set)%>% 
  mutate(c1f2 = c1f2.set)

long.1t2f = sim.1t2f %>% 
  select(time:f2) %>% 
  pivot_longer(cols = b1:f2, names_to = "pool", values_to = 'size') %>% 
  mutate(rep = str_sub(pool, 2,2)) %>% 
  mutate(pool = str_sub(pool, 1,1)) %>%
  group_by(pool, rep) %>% 
 slice(which(row_number() %% 501 == 1)) %>% 
  mutate(rep = case_when(
    rep == "1" ~ "Host/Fungus 1",
    rep == "2" ~ "Host/Fungus 2"
  ))

trade.1t2f = sim.1t2f %>% 
  select(time, c1f1:c1f2) %>% 
  pivot_longer(cols = c1f1:c1f2, names_to = "exchange", values_to = 'percent') %>% 
  mutate(from.pool = str_sub(exchange, 1,1))%>% 
  mutate(from.rep = str_sub(exchange, 2,2))%>% 
  mutate(to.pool = str_sub(exchange, 3,3))%>% 
  mutate(to.rep = str_sub(exchange, 4,4))%>%
  group_by(from.pool, from.rep)   %>% 
 slice(which(row_number() %% 501 == 1)) %>% 
  mutate(primary = case_when(
    from.rep == to.rep ~"primary",
    from.rep != to.rep ~"alternate"))


plot.1t2f = 
  ggplot(long.1t2f, aes(x = time, y = size, color = pool))+
  geom_line(aes(linetype = rep), size = 1.5)+ 
  facet_wrap(~rep)+
  labs(x = "Time", y = "Pool Size", title = "Different initial fungal pop sizes")+
  scale_color_manual(name = "", breaks = c("b", "n", "f"), labels = c("Host biomass", "Host nitrogen", "Fungal biomass"), values = c(b.color, n.color, f.color))+
  theme_classic()+guides(linetype = "none")
plot.1t2f

ggtrade.1t2f = 
  ggplot(trade.1t2f, aes(x = time, y = percent, color = primary))+
  geom_line( size = 1, linetype = "solid")+ 
  facet_grid(cols = vars(from.pool), rows = vars(from.rep))+
  labs(x = "Time", y = "Percent allocation")+
  theme_classic()+
  lims(y = c(0,1))+
  scale_color_manual(name = "", breaks = c("primary", "alternate"), labels = c("Preferred partner", "Alternate partner"), values = c(prim.color, alt.color))+
  labs(title = "Percent of resources allocated to each fungus")

ggtrade.1t2f

```

```{r, echo = FALSE}
primary.weight = 0.55 # how much preference each member of the network has for it's primary partner (e.g. Fungus 2's preference for Host 2)
#parameter values
tset = seq(from = 0, to = 5000, by = 0.01) # a timeseries to iterate over
a <- 0.25 # host allocation to symbiont
p1 <- .5 # host photosynthetic rate
mB1 <- .15 # host mortality
mN1 <- mB1 # host nitrogen loss rate
r11 <- primary.weight # preference of host 1 for fungus 1
r12 <- 1-r11 # preference of host 1 to fungus 2
epsilon <- 0.15 # fungal conversion efficiency
mF1 <- 0.1 # fungus 1 mortality rate
mF2 <- mF1 # fungus 2 mortality rate
u1 <- .25 # fungus 1 uptake rate
u2 <- .25 # fungus 2 uptake rate
N0 <- 100 # total system nitrogen
l = 0 # percent of tree resources lost from ROI allocation

#holding vectors and initial conditions
b1.set = rep(NaN, length(tset)); b1.set[1] <- 50
b2.set = rep(NaN, length(tset)); b2.set[1] <- 50
n1.set = rep(NaN, length(tset)); n1.set[1] <- b1.set[1]*0.5
n2.set = rep(NaN, length(tset)); n2.set[1] <- b2.set[1]*0.5
f1.set = rep(NaN, length(tset)); f1.set[1] <- b1.set[1]*0.15
f2.set = rep(NaN, length(tset)); f2.set[1] <- b2.set[1]*0.15
e.set = rep(NaN, length(tset));  e.set[1]  <- 100 - n1.set[1]-n2.set[1]

#historical sharing percentages based on relative size of each 
c1f1.set = rep(NaN, length(tset)); c1f1.set[1] <- f1.set[1]/(f1.set[1]+f2.set[1])
c1f2.set = rep(NaN, length(tset)); c1f2.set[1] <- f2.set[1]/(f1.set[1]+f2.set[1])

for(i in 2:length(tset)){
  dt <- tset[i]-tset[i-1]
  B1 <- b1.set[i-1];  N1 <- n1.set[i-1]; F1 <- f1.set[i-1]
                                         F2 <- f2.set[i-1]; E <- e.set[i-1]
  c1tof1 <- c1f1.set[i-1]; c1tof2 <- c1f2.set[i-1]

  dB1 <- (p1 * N1 - (a + mB1)*B1)*dt
  dN1 <- (E*(u1*F1+u2*F2)-mN1*N1)*dt
  
  dF1 <- ((a*B1*c1tof1*(1-l)+l*a*B1*r11)*epsilon-mF1*F1)*dt
  dF2 <- ((a*B1*c1tof2*(1-l)+l*a*B1*r12)*epsilon-mF2*F2)*dt

c1tof1.new <- r11*u1*F1/(r11*u1*F1+r12*u2*F2)
c1tof2.new <- r12*u2*F2/(r11*u1*F1+r12*u2*F2)

b1.set[i] <- B1 + dB1;n1.set[i] <- N1 + dN1;f1.set[i] <- F1 + dF1
                                            f2.set[i] <- F2 + dF2;e.set[i] <- E - (dN1 + dN2)
  
c1f1.set[i]<- c1tof1.new;c1f2.set[i]<- c1tof2.new
}
```

```{r, echo = FALSE}
sim.1t2f = tibble(time = tset) %>% 
  mutate(b1 = b1.set)%>% 
  mutate(n1 = n1.set)%>% 
  mutate(f1 = f1.set)%>% 
  mutate(f2 = f2.set) %>%  
  mutate(e = e.set) %>%
  mutate(c1f1 = c1f1.set)%>% 
  mutate(c1f2 = c1f2.set)

long.1t2f = sim.1t2f %>% 
  select(time:f2) %>% 
  pivot_longer(cols = b1:f2, names_to = "pool", values_to = 'size') %>% 
  mutate(rep = str_sub(pool, 2,2)) %>% 
  mutate(pool = str_sub(pool, 1,1)) %>%
  group_by(pool, rep) %>% 
 slice(which(row_number() %% 501 == 1)) %>% 
  mutate(rep = case_when(
    rep == "1" ~ "Host/Fungus 1",
    rep == "2" ~ "Host/Fungus 2"
  ))

trade.1t2f = sim.1t2f %>% 
  select(time, c1f1:c1f2) %>% 
  pivot_longer(cols = c1f1:c1f2, names_to = "exchange", values_to = 'percent') %>% 
  mutate(from.pool = str_sub(exchange, 1,1))%>% 
  mutate(from.rep = str_sub(exchange, 2,2))%>% 
  mutate(to.pool = str_sub(exchange, 3,3))%>% 
  mutate(to.rep = str_sub(exchange, 4,4))%>%
  group_by(from.pool, from.rep)   %>% 
 slice(which(row_number() %% 501 == 1)) %>% 
  mutate(primary = case_when(
    from.rep == to.rep ~"primary",
    from.rep != to.rep ~"alternate"))


plot.1t2f = 
  ggplot(long.1t2f, aes(x = time, y = size, color = pool))+
  geom_line(aes(linetype = rep), size = 1.5)+ 
  facet_wrap(~rep)+
  labs(x = "Time", y = "Pool Size", title = "Preference for fungus 1")+
  scale_color_manual(name = "", breaks = c("b", "n", "f"), labels = c("Host biomass", "Host nitrogen", "Fungal biomass"), values = c(b.color, n.color, f.color))+
  theme_classic()+guides(linetype = "none")
plot.1t2f

ggtrade.1t2f = 
  ggplot(trade.1t2f, aes(x = time, y = percent, color = primary))+
  geom_line( size = 1, linetype = "solid")+ 
  facet_grid(cols = vars(from.pool), rows = vars(from.rep))+
  labs(x = "Time", y = "Percent allocation")+
  theme_classic()+
  lims(y = c(0,1))+
  scale_color_manual(name = "", breaks = c("primary", "alternate"), labels = c("Preferred partner", "Alternate partner"), values = c(prim.color, alt.color))+
  labs(title = "Percent of resources allocated to each fungus")

ggtrade.1t2f

```

```{r, echo = FALSE}
primary.weight = 0.55 # how much preference each member of the network has for it's primary partner (e.g. Fungus 2's preference for Host 2)
#parameter values
tset = seq(from = 0, to = 5000, by = 0.01) # a timeseries to iterate over
a <- 0.25 # host allocation to symbiont
p1 <- .5 # host photosynthetic rate
mB1 <- .15 # host mortality
mN1 <- mB1 # host nitrogen loss rate
r11 <- primary.weight # preference of host 1 for fungus 1
r12 <- 1-r11 # preference of host 1 to fungus 2
epsilon <- 0.15 # fungal conversion efficiency
mF1 <- 0.1 # fungus 1 mortality rate
mF2 <- mF1 # fungus 2 mortality rate
u1 <- .25 # fungus 1 uptake rate
u2 <- .25 # fungus 2 uptake rate
N0 <- 100 # total system nitrogen
l = 0 # percent of tree resources lost from ROI allocation

#holding vectors and initial conditions
b1.set = rep(NaN, length(tset)); b1.set[1] <- 50
b2.set = rep(NaN, length(tset)); b2.set[1] <- 65
n1.set = rep(NaN, length(tset)); n1.set[1] <- b1.set[1]*0.5
n2.set = rep(NaN, length(tset)); n2.set[1] <- b2.set[1]*0.5
f1.set = rep(NaN, length(tset)); f1.set[1] <- b1.set[1]*0.15
f2.set = rep(NaN, length(tset)); f2.set[1] <- b2.set[1]*0.15
e.set = rep(NaN, length(tset));  e.set[1]  <- 100 - n1.set[1]-n2.set[1]

#historical sharing percentages based on relative size of each 
c1f1.set = rep(NaN, length(tset)); c1f1.set[1] <- f1.set[1]/(f1.set[1]+f2.set[1])
c1f2.set = rep(NaN, length(tset)); c1f2.set[1] <- f2.set[1]/(f1.set[1]+f2.set[1])

for(i in 2:length(tset)){
  dt <- tset[i]-tset[i-1]
  B1 <- b1.set[i-1];  N1 <- n1.set[i-1]; F1 <- f1.set[i-1]
                                         F2 <- f2.set[i-1]; E <- e.set[i-1]
  c1tof1 <- c1f1.set[i-1]; c1tof2 <- c1f2.set[i-1]

  dB1 <- (p1 * N1 - (a + mB1)*B1)*dt
  dN1 <- (E*(u1*F1+u2*F2)-mN1*N1)*dt
  
  dF1 <- ((a*B1*c1tof1*(1-l)+l*a*B1*r11)*epsilon-mF1*F1)*dt
  dF2 <- ((a*B1*c1tof2*(1-l)+l*a*B1*r12)*epsilon-mF2*F2)*dt

c1tof1.new <- r11*u1*F1/(r11*u1*F1+r12*u2*F2)
c1tof2.new <- r12*u2*F2/(r11*u1*F1+r12*u2*F2)

b1.set[i] <- B1 + dB1;n1.set[i] <- N1 + dN1;f1.set[i] <- F1 + dF1
                                            f2.set[i] <- F2 + dF2;e.set[i] <- E - (dN1 + dN2)
  
c1f1.set[i]<- c1tof1.new;c1f2.set[i]<- c1tof2.new
}
```

```{r, echo = FALSE}
sim.1t2f = tibble(time = tset) %>% 
  mutate(b1 = b1.set)%>% 
  mutate(n1 = n1.set)%>% 
  mutate(f1 = f1.set)%>% 
  mutate(f2 = f2.set) %>%  
  mutate(e = e.set) %>%
  mutate(c1f1 = c1f1.set)%>% 
  mutate(c1f2 = c1f2.set)

long.1t2f = sim.1t2f %>% 
  select(time:f2) %>% 
  pivot_longer(cols = b1:f2, names_to = "pool", values_to = 'size') %>% 
  mutate(rep = str_sub(pool, 2,2)) %>% 
  mutate(pool = str_sub(pool, 1,1)) %>%
  group_by(pool, rep) %>% 
 slice(which(row_number() %% 501 == 1)) %>% 
  mutate(rep = case_when(
    rep == "1" ~ "Host/Fungus 1",
    rep == "2" ~ "Host/Fungus 2"
  ))

trade.1t2f = sim.1t2f %>% 
  select(time, c1f1:c1f2) %>% 
  pivot_longer(cols = c1f1:c1f2, names_to = "exchange", values_to = 'percent') %>% 
  mutate(from.pool = str_sub(exchange, 1,1))%>% 
  mutate(from.rep = str_sub(exchange, 2,2))%>% 
  mutate(to.pool = str_sub(exchange, 3,3))%>% 
  mutate(to.rep = str_sub(exchange, 4,4))%>%
  group_by(from.pool, from.rep)   %>% 
 slice(which(row_number() %% 501 == 1)) %>% 
  mutate(primary = case_when(
    from.rep == to.rep ~"primary",
    from.rep != to.rep ~"alternate"))


plot.1t2f = 
  ggplot(long.1t2f, aes(x = time, y = size, color = pool))+
  geom_line(aes(linetype = rep), size = 1.5)+ 
  facet_wrap(~rep)+
  labs(x = "Time", y = "Pool Size", title = "Different initial fungal pop sizes and preference")+
  scale_color_manual(name = "", breaks = c("b", "n", "f"), labels = c("Host biomass", "Host nitrogen", "Fungal biomass"), values = c(b.color, n.color, f.color))+
  theme_classic()+guides(linetype = "none")
plot.1t2f

ggtrade.1t2f = 
  ggplot(trade.1t2f, aes(x = time, y = percent, color = primary))+
  geom_line( size = 1, linetype = "solid")+ 
  facet_grid(cols = vars(from.pool), rows = vars(from.rep))+
  labs(x = "Time", y = "Percent allocation")+
  theme_classic()+
  lims(y = c(0,1))+
  scale_color_manual(name = "", breaks = c("primary", "alternate"), labels = c("Preferred partner", "Alternate partner"), values = c(prim.color, alt.color))+
  labs(title = "Percent of resources allocated to each fungus")

ggtrade.1t2f

```

Differences in fungal pop sizes **cannot** be overcome if preference is 50%. 
Difference in host preference for one fungus or the other results in loss of the less preferred fungus. 
When fungal populations are both initially different and preference is included, the effect of the preference drives the result and the less preferred fungus dies out. 

## Two trees - two fungi

```{r, echo = FALSE}
primary.weight = 0.5 # how much preference each member of the network has for it's primary partner (e.g. Fungus 2's preference for Host 2)
#parameter values
tset = seq(from = 0, to = 5000, by = 0.01) # a timeseries to iterate over
a <- 0.25 # host allocation to symbiont
p1 <- .5 # host 1 photosynthetic rate
p2 <- p1 # host 2 photosynthetic rate
mB1 <- .15 # host 1 mortality
mB2 <- .15 # host 2 mortality
mN1 <- mB1 # host 1 nitrogen loss rate
mN2 <- mB2 # host 2 nitrogen loss rate
r11 <- primary.weight # preference of host 1 toward fungus 1
r12 <- 1-r11 # preference of host 1 toward fungus 2
r22 <- primary.weight # preference of host 2 toward fungus 2
r21 <- 1-r22 # preference of host 2 toward fungus 1
epsilon <- 0.15 # fungal conversion efficiency
mF1 <- 0.1 # fungus 1 mortality rate
mF2 <- mF1 # fungus 2 mortality rate
u1 <- .25 # fungus 1 uptake rate
u2 <- .25 # fungus 2 uptake rate
s11 <- primary.weight # preference of fungus 1 toward host 1
s12 <- 1-s11 # preference of fungus 1 toward host 2
s22 <- primary.weight # preference of fungus 2 toward host 2
s21 <- 1-s22 # preference of fungus 2 toward host 1
N0 <- 100 # total system nitrogen
l = 0 # percent of tree resources lost from ROI allocation


#holding vectors and initial conditions
b1.set = rep(NaN, length(tset)); b1.set[1] <- 65
b2.set = rep(NaN, length(tset)); b2.set[1] <- 50
n1.set = rep(NaN, length(tset)); n1.set[1] <- b1.set[1]*0.5
n2.set = rep(NaN, length(tset)); n2.set[1] <- b2.set[1]*0.5
f1.set = rep(NaN, length(tset)); f1.set[1] <- b1.set[1]*0.15
f2.set = rep(NaN, length(tset)); f2.set[1] <- b1.set[1]*0.15
e.set = rep(NaN, length(tset));  e.set[1]  <- 100 - n1.set[1]-n2.set[1]

#historical sharing percentages based on relative size of each 
c1f1.set = rep(NaN, length(tset)); c1f1.set[1] <- f1.set[1]/(f1.set[1]+f2.set[1])
c1f2.set = rep(NaN, length(tset)); c1f2.set[1] <- f2.set[1]/(f1.set[1]+f2.set[1])
c2f1.set = rep(NaN, length(tset)); c2f1.set[1] <- f1.set[1]/(f1.set[1]+f2.set[1])
c2f2.set = rep(NaN, length(tset)); c2f2.set[1] <- f2.set[1]/(f1.set[1]+f2.set[1])
f1n1.set = rep(NaN, length(tset)); f1n1.set[1] <- b1.set[1]/(b1.set[1]+b2.set[1])
f1n2.set = rep(NaN, length(tset)); f1n2.set[1] <- b2.set[1]/(b1.set[1]+b2.set[1])
f2n1.set = rep(NaN, length(tset)); f2n1.set[1] <- b1.set[1]/(b1.set[1]+b2.set[1])
f2n2.set = rep(NaN, length(tset)); f2n2.set[1] <- b2.set[1]/(b1.set[1]+b2.set[1])


for(i in 2:length(tset)){
  dt <- tset[i]-tset[i-1]
  B1 <- b1.set[i-1];  N1 <- n1.set[i-1]; F1 <- f1.set[i-1]
  B2 <- b2.set[i-1];  N2 <- n2.set[i-1];F2 <- f2.set[i-1]; E <- e.set[i-1]
  c1tof1 <- c1f1.set[i-1]; c1tof2 <- c1f2.set[i-1]; c2tof1 <- c2f1.set[i-1]; c2tof2 <- c2f2.set[i-1]
  f1ton1 <- f1n1.set[i-1]; f1ton2 <- f1n2.set[i-1]; f2ton1 <- f2n1.set[i-1]; f2ton2 <- f2n2.set[i-1]

  dB1 <- (p1 * N1 - (a + mB1)*B1)*dt
  dN1 <- (E*(u1*F1*f1ton1+u2*F2*f2ton1)-mN1*N1)*dt
  dB2 <- (p2 * N2 - (a + mB2)*B2)*dt
  dN2 <- (E*(u1*F1*f1ton2+u2*F2*f2ton2)-mN2*N2)*dt
  dF1 <- ((a*B1*c1tof1*(1-l)+l*a*B1*r11)*epsilon+(a*B2*c2tof1*(1-l)+l*a*B2*r21)*epsilon-mF1*F1)*dt
  dF2 <- ((a*B1*c1tof2*(1-l)+l*a*B1*r12)*epsilon+(a*B2*c2tof2*(1-l)+l*a*B2*r22)*epsilon-mF2*F2)*dt

c1tof1.new <- r11*u1*F1*s11*f1ton1/(r11*u1*F1*s11*f1ton1+r12*u2*F2*s21*f2ton1)
c1tof2.new <- r12*u2*F2*s21*f2ton1/(r11*u1*F1*s11*f1ton1+r12*u2*F2*s21*f2ton1)
c2tof1.new <- r21*u1*F1*s12*f1ton2/(r21*u1*F1*s12*f1ton2+r22*u2*F2*s22*f2ton2)
c2tof2.new <- r22*u2*F2*s22*f2ton2/(r21*u1*F1*s12*f1ton2+r22*u2*F2*s22*f2ton2)
f1ton1.new <- s11*(a*B1*c1tof1*(1-l)+l*a*B1*r11)/(s11*(a*B1*c1tof1*(1-l)+l*a*B1*r11)+s12*(a*B2*c2tof1*(1-l)+l*a*B2*r21))
f1ton2.new <- s12*(a*B2*c2tof1*(1-l)+l*a*B2*r21)/(s11*(a*B1*c1tof1*(1-l)+l*a*B1*r11)+s12*(a*B2*c2tof1*(1-l)+l*a*B2*r21))
f2ton1.new <- s21*(a*B1*c1tof2*(1-l)+l*a*B1*r12)/(s21*(a*B1*c1tof2*(1-l)+l*a*B1*r12)+s22*(a*B2*c2tof2*(1-l)+l*a*B2*r22))
f2ton2.new <- s22*(a*B2*c2tof2*(1-l)+l*a*B2*r22)/(s21*(a*B1*c1tof2*(1-l)+l*a*B1*r12)+s22*(a*B2*c2tof2*(1-l)+l*a*B2*r22))
  
b1.set[i] <- B1 + dB1;n1.set[i] <- N1 + dN1;f1.set[i] <- F1 + dF1
b2.set[i] <- B2 + dB2;n2.set[i] <- N2 + dN2;f2.set[i] <- F2 + dF2;e.set[i] <- E - (dN1 + dN2)
  
c1f1.set[i]<- c1tof1.new;c1f2.set[i]<- c1tof2.new;c2f1.set[i]<- c2tof1.new;c2f2.set[i]<- c2tof2.new
f1n1.set[i]<- f1ton1.new;f1n2.set[i]<- f1ton2.new;f2n1.set[i]<- f2ton1.new;f2n2.set[i]<- f2ton2.new
}
```

```{r, echo = FALSE}
sim.2t2f = tibble(time = tset) %>% 
  mutate(b1 = b1.set)%>% 
  mutate(b2 = b2.set)%>% 
  mutate(n1 = n1.set)%>% 
  mutate(n2 = n2.set) %>% 
  mutate(f1 = f1.set)%>% 
  mutate(f2 = f2.set) %>%  
  mutate(e = e.set) %>%
  mutate(c1f1 = c1f1.set)%>% 
  mutate(c1f2 = c1f2.set)%>% 
  mutate(c2f1 = c2f1.set)%>% 
  mutate(c2f2 = c2f2.set)%>% 
  mutate(f1n1 = f1n1.set)%>% 
  mutate(f1n2 = f1n2.set)%>% 
  mutate(f2n1 = f2n1.set)%>% 
  mutate(f2n2 = f2n2.set) 

long.2t2f = sim.2t2f %>% 
  select(time:f2) %>% 
  pivot_longer(cols = b1:f2, names_to = "pool", values_to = 'size') %>% 
  mutate(rep = str_sub(pool, 2,2)) %>% 
  mutate(pool = str_sub(pool, 1,1)) %>%
  group_by(pool, rep) %>% 
 slice(which(row_number() %% 501 == 1)) %>% 
  mutate(rep = case_when(
    rep == "1" ~ "Host/Fungus 1",
    rep == "2" ~ "Host/Fungus 2"
  ))

trade.2t2f = sim.2t2f %>% 
  select(time, c1f1:f2n2) %>% 
  pivot_longer(cols = c1f1:f2n2, names_to = "exchange", values_to = 'percent') %>% 
  mutate(from.pool = str_sub(exchange, 1,1))%>% 
  mutate(from.rep = str_sub(exchange, 2,2))%>% 
  mutate(to.pool = str_sub(exchange, 3,3))%>% 
  mutate(to.rep = str_sub(exchange, 4,4))%>%
  group_by(from.pool, from.rep)   %>% 
 slice(which(row_number() %% 501 == 1)) %>% 
  mutate(primary = case_when(
    from.rep == to.rep ~"primary",
    from.rep != to.rep ~"alternate")) 


plot.2t2f = 
  ggplot(long.2t2f, aes(x = time, y = size, color = pool))+
  geom_line(aes(linetype = rep), size = 1.5)+ 
  facet_wrap(~rep)+
  labs(x = "Time", y = "Pool Size", "Different initial conditions")+
  scale_color_manual(name = "", breaks = c("b", "n", "f"), labels = c("Host biomass", "Host nitrogen", "Fungal biomass"), values = c(b.color, n.color, f.color))+
  theme_classic()+guides(linetype = "none")#+transition_reveal(time)

# animate(plot.2t2f, duration = 5, renderer = gifski_renderer(loop = FALSE), 
#         height = 5, width = 7, units = "in", res = 300)
# anim_save(here("esa", "plot2t2f.gif"))

plot.2t2f

ggtrade.2t2f = 
  ggplot(trade.2t2f, aes(x = time, y = percent, color = primary))+
  geom_line( size = 1, linetype = "solid")+ 
  facet_grid(cols = vars(from.pool), rows = vars(from.rep))+
  labs(x = "Time", y = "Percent allocation")+
  theme_classic()+
  lims(y = c(0,1))+
  scale_color_manual(name = "", breaks = c("primary", "alternate"), labels = c("Preferred partner", "Alternate partner"), values = c(prim.color, alt.color))+
  labs(title = "Percent of resources allocated to each host or fungus")#+transition_reveal(time)
#animate(ggtrade.2t2f, duration = 5, renderer = gifski_renderer(loop = FALSE),height = 5, width = 7, units = "in", res = 300)
ggtrade.2t2f
#anim_save(here("esa", "trade2t2f.gif"))


```

```{r, echo = FALSE}
primary.weight = 0.75 # how much preference each member of the network has for it's primary partner (e.g. Fungus 2's preference for Host 2)
#parameter values
tset = seq(from = 0, to = 5000, by = 0.01) # a timeseries to iterate over
a <- 0.25 # host allocation to symbiont
p1 <- .5 # host 1 photosynthetic rate
p2 <- p1 # host 2 photosynthetic rate
mB1 <- .15 # host 1 mortality
mB2 <- .15 # host 2 mortality
mN1 <- mB1 # host 1 nitrogen loss rate
mN2 <- mB2 # host 2 nitrogen loss rate
r11 <- primary.weight # preference of host 1 toward fungus 1
r12 <- 1-r11 # preference of host 1 toward fungus 2
r22 <- primary.weight # preference of host 2 toward fungus 2
r21 <- 1-r22 # preference of host 2 toward fungus 1
epsilon <- 0.15 # fungal conversion efficiency
mF1 <- 0.1 # fungus 1 mortality rate
mF2 <- mF1 # fungus 2 mortality rate
u1 <- .25 # fungus 1 uptake rate
u2 <- .25 # fungus 2 uptake rate
s11 <- primary.weight # preference of fungus 1 toward host 1
s12 <- 1-s11 # preference of fungus 1 toward host 2
s22 <- primary.weight # preference of fungus 2 toward host 2
s21 <- 1-s22 # preference of fungus 2 toward host 1
N0 <- 100 # total system nitrogen
l = 0 # percent of tree resources lost from ROI allocation


#holding vectors and initial conditions
b1.set = rep(NaN, length(tset)); b1.set[1] <- 75
b2.set = rep(NaN, length(tset)); b2.set[1] <- 25
n1.set = rep(NaN, length(tset)); n1.set[1] <- b1.set[1]*0.5
n2.set = rep(NaN, length(tset)); n2.set[1] <- b2.set[1]*0.5
f1.set = rep(NaN, length(tset)); f1.set[1] <- b1.set[1]*0.15
f2.set = rep(NaN, length(tset)); f2.set[1] <- b1.set[1]*0.15
e.set = rep(NaN, length(tset));  e.set[1]  <- 100 - n1.set[1]-n2.set[1]

#historical sharing percentages based on relative size of each 
c1f1.set = rep(NaN, length(tset)); c1f1.set[1] <- f1.set[1]/(f1.set[1]+f2.set[1])
c1f2.set = rep(NaN, length(tset)); c1f2.set[1] <- f2.set[1]/(f1.set[1]+f2.set[1])
c2f1.set = rep(NaN, length(tset)); c2f1.set[1] <- f1.set[1]/(f1.set[1]+f2.set[1])
c2f2.set = rep(NaN, length(tset)); c2f2.set[1] <- f2.set[1]/(f1.set[1]+f2.set[1])
f1n1.set = rep(NaN, length(tset)); f1n1.set[1] <- b1.set[1]/(b1.set[1]+b2.set[1])
f1n2.set = rep(NaN, length(tset)); f1n2.set[1] <- b2.set[1]/(b1.set[1]+b2.set[1])
f2n1.set = rep(NaN, length(tset)); f2n1.set[1] <- b1.set[1]/(b1.set[1]+b2.set[1])
f2n2.set = rep(NaN, length(tset)); f2n2.set[1] <- b2.set[1]/(b1.set[1]+b2.set[1])


for(i in 2:length(tset)){
  dt <- tset[i]-tset[i-1]
  B1 <- b1.set[i-1];  N1 <- n1.set[i-1]; F1 <- f1.set[i-1]
  B2 <- b2.set[i-1];  N2 <- n2.set[i-1];F2 <- f2.set[i-1]; E <- e.set[i-1]
  c1tof1 <- c1f1.set[i-1]; c1tof2 <- c1f2.set[i-1]; c2tof1 <- c2f1.set[i-1]; c2tof2 <- c2f2.set[i-1]
  f1ton1 <- f1n1.set[i-1]; f1ton2 <- f1n2.set[i-1]; f2ton1 <- f2n1.set[i-1]; f2ton2 <- f2n2.set[i-1]

  dB1 <- (p1 * N1 - (a + mB1)*B1)*dt
  dN1 <- (E*(u1*F1*f1ton1+u2*F2*f2ton1)-mN1*N1)*dt
  dB2 <- (p2 * N2 - (a + mB2)*B2)*dt
  dN2 <- (E*(u1*F1*f1ton2+u2*F2*f2ton2)-mN2*N2)*dt
  dF1 <- ((a*B1*c1tof1*(1-l)+l*a*B1*r11)*epsilon+(a*B2*c2tof1*(1-l)+l*a*B2*r21)*epsilon-mF1*F1)*dt
  dF2 <- ((a*B1*c1tof2*(1-l)+l*a*B1*r12)*epsilon+(a*B2*c2tof2*(1-l)+l*a*B2*r22)*epsilon-mF2*F2)*dt

c1tof1.new <- r11*u1*F1*s11*f1ton1/(r11*u1*F1*s11*f1ton1+r12*u2*F2*s21*f2ton1)
c1tof2.new <- r12*u2*F2*s21*f2ton1/(r11*u1*F1*s11*f1ton1+r12*u2*F2*s21*f2ton1)
c2tof1.new <- r21*u1*F1*s12*f1ton2/(r21*u1*F1*s12*f1ton2+r22*u2*F2*s22*f2ton2)
c2tof2.new <- r22*u2*F2*s22*f2ton2/(r21*u1*F1*s12*f1ton2+r22*u2*F2*s22*f2ton2)
f1ton1.new <- s11*(a*B1*c1tof1*(1-l)+l*a*B1*r11)/(s11*(a*B1*c1tof1*(1-l)+l*a*B1*r11)+s12*(a*B2*c2tof1*(1-l)+l*a*B2*r21))
f1ton2.new <- s12*(a*B2*c2tof1*(1-l)+l*a*B2*r21)/(s11*(a*B1*c1tof1*(1-l)+l*a*B1*r11)+s12*(a*B2*c2tof1*(1-l)+l*a*B2*r21))
f2ton1.new <- s21*(a*B1*c1tof2*(1-l)+l*a*B1*r12)/(s21*(a*B1*c1tof2*(1-l)+l*a*B1*r12)+s22*(a*B2*c2tof2*(1-l)+l*a*B2*r22))
f2ton2.new <- s22*(a*B2*c2tof2*(1-l)+l*a*B2*r22)/(s21*(a*B1*c1tof2*(1-l)+l*a*B1*r12)+s22*(a*B2*c2tof2*(1-l)+l*a*B2*r22))
  
b1.set[i] <- B1 + dB1;n1.set[i] <- N1 + dN1;f1.set[i] <- F1 + dF1
b2.set[i] <- B2 + dB2;n2.set[i] <- N2 + dN2;f2.set[i] <- F2 + dF2;e.set[i] <- E - (dN1 + dN2)
  
c1f1.set[i]<- c1tof1.new;c1f2.set[i]<- c1tof2.new;c2f1.set[i]<- c2tof1.new;c2f2.set[i]<- c2tof2.new
f1n1.set[i]<- f1ton1.new;f1n2.set[i]<- f1ton2.new;f2n1.set[i]<- f2ton1.new;f2n2.set[i]<- f2ton2.new
}
```

```{r, echo = FALSE}
sim.2t2f = tibble(time = tset) %>% 
  mutate(b1 = b1.set)%>% 
  mutate(b2 = b2.set)%>% 
  mutate(n1 = n1.set)%>% 
  mutate(n2 = n2.set) %>% 
  mutate(f1 = f1.set)%>% 
  mutate(f2 = f2.set) %>%  
  mutate(e = e.set) %>%
  mutate(c1f1 = c1f1.set)%>% 
  mutate(c1f2 = c1f2.set)%>% 
  mutate(c2f1 = c2f1.set)%>% 
  mutate(c2f2 = c2f2.set)%>% 
  mutate(f1n1 = f1n1.set)%>% 
  mutate(f1n2 = f1n2.set)%>% 
  mutate(f2n1 = f2n1.set)%>% 
  mutate(f2n2 = f2n2.set) 

long.2t2f = sim.2t2f %>% 
  select(time:f2) %>% 
  pivot_longer(cols = b1:f2, names_to = "pool", values_to = 'size') %>% 
  mutate(rep = str_sub(pool, 2,2)) %>% 
  mutate(pool = str_sub(pool, 1,1)) %>%
  group_by(pool, rep) %>% 
 slice(which(row_number() %% 501 == 1)) %>% 
  mutate(rep = case_when(
    rep == "1" ~ "Host/Fungus 1",
    rep == "2" ~ "Host/Fungus 2"
  ))

trade.2t2f = sim.2t2f %>% 
  select(time, c1f1:f2n2) %>% 
  pivot_longer(cols = c1f1:f2n2, names_to = "exchange", values_to = 'percent') %>% 
  mutate(from.pool = str_sub(exchange, 1,1))%>% 
  mutate(from.rep = str_sub(exchange, 2,2))%>% 
  mutate(to.pool = str_sub(exchange, 3,3))%>% 
  mutate(to.rep = str_sub(exchange, 4,4))%>%
  group_by(from.pool, from.rep)   %>% 
 slice(which(row_number() %% 501 == 1)) %>% 
  mutate(primary = case_when(
    from.rep == to.rep ~"primary",
    from.rep != to.rep ~"alternate")) 


plot.2t2f = 
  ggplot(long.2t2f, aes(x = time, y = size, color = pool))+
  geom_line(aes(linetype = rep), size = 1.5)+ 
  facet_wrap(~rep)+
  labs(x = "Time", y = "Pool Size", title = "Different initial conditions and 75% preference")+
  scale_color_manual(name = "", breaks = c("b", "n", "f"), labels = c("Host biomass", "Host nitrogen", "Fungal biomass"), values = c(b.color, n.color, f.color))+
  theme_classic()+guides(linetype = "none")#+transition_reveal(time)

# animate(plot.2t2f, duration = 5, renderer = gifski_renderer(loop = FALSE), 
#         height = 5, width = 7, units = "in", res = 300)
# anim_save(here("esa", "plot2t2f.gif"))

plot.2t2f

ggtrade.2t2f = 
  ggplot(trade.2t2f, aes(x = time, y = percent, color = primary))+
  geom_line( size = 1, linetype = "solid")+ 
  facet_grid(cols = vars(from.pool), rows = vars(from.rep))+
  labs(x = "Time", y = "Percent allocation")+
  theme_classic()+
  lims(y = c(0,1))+
  scale_color_manual(name = "", breaks = c("primary", "alternate"), labels = c("Preferred partner", "Alternate partner"), values = c(prim.color, alt.color))+
  labs(title = "Percent of resources allocated to each host or fungus")#+transition_reveal(time)
#animate(ggtrade.2t2f, duration = 5, renderer = gifski_renderer(loop = FALSE),height = 5, width = 7, units = "in", res = 300)
ggtrade.2t2f
#anim_save(here("esa", "trade2t2f.gif"))


```

Any host or partner pool started initially lower will remain lower if preference is 50%.  
When there is preference >50% in the system, both the host and the fungi equillibrate to the same level as the higher initial condition.
As preference increases, the effect of the lower initial condition is amplified. This can be somewhat mediated by allowing the primary fungus of the low-initial-condition host to start even with the alternate fungus.

