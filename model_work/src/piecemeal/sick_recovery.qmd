---
title: "Recovery time"
format: html
editor: source
---


```{r, message=FALSE, echo = FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(here)
library(gganimate)
library(gifski)
library(viridis)
library(viridisLite)
library(plotly)
library(latex2exp)

b.color = "#85A389"
n.color = "#A2CDB0"
f.color = "#F1C27B"

prim.color = "#3b78a3"
alt.color = "#bd4665"

log.max = function(x){
  case_when(
    log(x) > 5 ~ 5,
    log(x) < -5 ~ -5,
    .default = log(x)
  )
}
```

```{r, echo = FALSE}
series.steps = 50
primary.series = seq(0.5, 1, length.out = series.steps)
```


## Two trees - two fungi

```{r, echo = FALSE}
fullroi_recovery.b1 = rep(NaN, series.steps)
fullroi_recovery.n1 = rep(NaN, series.steps)
fullroi_recovery.f1 = rep(NaN, series.steps)
fullroi_recovery.b2 = rep(NaN, series.steps)
fullroi_recovery.n2 = rep(NaN, series.steps)
fullroi_recovery.f2 = rep(NaN, series.steps)

for(j in 1:series.steps){

primary.weight = primary.series[j] # how much preference each member of the network has for it's primary partner (e.g. Fungus 2's preference for Host 2)
#parameter values
tset = seq(from = 0, to = 5000, by = 0.01) # a timeseries to iterate over
a <- 0.25 # host allocation to symbiont
p1 <- .5 # host 1 photosynthetic rate
p2 <- p1 # host 2 photosynthetic rate
mB1 <- .15 # host 1 mortality
mB2 <- .15 # host 2 mortality
mN1 <- mB1 # host 1 nitrogen loss rate
mN2 <- mB2 # host 2 nitrogen loss rate
r11 <- primary.weight # preference of host 1 toward fungus 1
r12 <- 1-r11 # preference of host 1 toward fungus 2
r22 <- primary.weight # preference of host 2 toward fungus 2
r21 <- 1-r22 # preference of host 2 toward fungus 1
epsilon <- 0.15 # fungal conversion efficiency
mF1 <- 0.1 # fungus 1 mortality rate
mF2 <- mF1 # fungus 2 mortality rate
u1 <- .25 # fungus 1 uptake rate
u2 <- .25 # fungus 2 uptake rate
s11 <- primary.weight # preference of fungus 1 toward host 1
s12 <- 1-s11 # preference of fungus 1 toward host 2
s22 <- primary.weight # preference of fungus 2 toward host 2
s21 <- 1-s22 # preference of fungus 2 toward host 1
N0 <- 100 # total system nitrogen
l = 1 # percent of tree resources lost from ROI allocation


#holding vectors and initial conditions
b1.set = rep(NaN, length(tset)); b1.set[1] <- 50
b2.set = rep(NaN, length(tset)); b2.set[1] <- 50
n1.set = rep(NaN, length(tset)); n1.set[1] <- b1.set[1]*0.5
n2.set = rep(NaN, length(tset)); n2.set[1] <- b2.set[1]*0.5
f1.set = rep(NaN, length(tset)); f1.set[1] <- b1.set[1]*0.15
f2.set = rep(NaN, length(tset)); f2.set[1] <- b1.set[1]*0.15
e.set = rep(NaN, length(tset));  e.set[1]  <- 100 - n1.set[1]-n2.set[1]

#historical sharing percentages based on relative size of each 
c1f1.set = rep(NaN, length(tset)); c1f1.set[1] <- f1.set[1]/(f1.set[1]+f2.set[1])
c1f2.set = rep(NaN, length(tset)); c1f2.set[1] <- f2.set[1]/(f1.set[1]+f2.set[1])
c2f1.set = rep(NaN, length(tset)); c2f1.set[1] <- f1.set[1]/(f1.set[1]+f2.set[1])
c2f2.set = rep(NaN, length(tset)); c2f2.set[1] <- f2.set[1]/(f1.set[1]+f2.set[1])
f1n1.set = rep(NaN, length(tset)); f1n1.set[1] <- b1.set[1]/(b1.set[1]+b2.set[1])
f1n2.set = rep(NaN, length(tset)); f1n2.set[1] <- b2.set[1]/(b1.set[1]+b2.set[1])
f2n1.set = rep(NaN, length(tset)); f2n1.set[1] <- b1.set[1]/(b1.set[1]+b2.set[1])
f2n2.set = rep(NaN, length(tset)); f2n2.set[1] <- b2.set[1]/(b1.set[1]+b2.set[1])


for(i in 2:length(tset)){
  dt <- tset[i]-tset[i-1]
  B1 <- b1.set[i-1];  N1 <- n1.set[i-1]; F1 <- f1.set[i-1]
  B2 <- b2.set[i-1];  N2 <- n2.set[i-1];F2 <- f2.set[i-1]; E <- e.set[i-1]
  c1tof1 <- c1f1.set[i-1]; c1tof2 <- c1f2.set[i-1]; c2tof1 <- c2f1.set[i-1]; c2tof2 <- c2f2.set[i-1]
  f1ton1 <- f1n1.set[i-1]; f1ton2 <- f1n2.set[i-1]; f2ton1 <- f2n1.set[i-1]; f2ton2 <- f2n2.set[i-1]

  dB1 <- (p1 * N1 - (a + mB1)*B1)*dt
  dN1 <- (E*(u1*F1*f1ton1+u2*F2*f2ton1)-mN1*N1)*dt
  dB2 <- (p2 * N2 - (a + mB2)*B2)*dt
  dN2 <- (E*(u1*F1*f1ton2+u2*F2*f2ton2)-mN2*N2)*dt
  dF1 <- ((a*B1*c1tof1*(1-l)+l*a*B1*r11)*epsilon+(a*B2*c2tof1*(1-l)+l*a*B2*r21)*epsilon-mF1*F1)*dt
  dF2 <- ((a*B1*c1tof2*(1-l)+l*a*B1*r12)*epsilon+(a*B2*c2tof2*(1-l)+l*a*B2*r22)*epsilon-mF2*F2)*dt

c1tof1.new <- r11*u1*F1*s11*f1ton1/(r11*u1*F1*s11*f1ton1+r12*u2*F2*s21*f2ton1)
c1tof2.new <- r12*u2*F2*s21*f2ton1/(r11*u1*F1*s11*f1ton1+r12*u2*F2*s21*f2ton1)
c2tof1.new <- r21*u1*F1*s12*f1ton2/(r21*u1*F1*s12*f1ton2+r22*u2*F2*s22*f2ton2)
c2tof2.new <- r22*u2*F2*s22*f2ton2/(r21*u1*F1*s12*f1ton2+r22*u2*F2*s22*f2ton2)
f1ton1.new <- s11*(a*B1*c1tof1*(1-l)+l*a*B1*r11)/(s11*(a*B1*c1tof1*(1-l)+l*a*B1*r11)+s12*(a*B2*c2tof1*(1-l)+l*a*B2*r21))
f1ton2.new <- s12*(a*B2*c2tof1*(1-l)+l*a*B2*r21)/(s11*(a*B1*c1tof1*(1-l)+l*a*B1*r11)+s12*(a*B2*c2tof1*(1-l)+l*a*B2*r21))
f2ton1.new <- s21*(a*B1*c1tof2*(1-l)+l*a*B1*r12)/(s21*(a*B1*c1tof2*(1-l)+l*a*B1*r12)+s22*(a*B2*c2tof2*(1-l)+l*a*B2*r22))
f2ton2.new <- s22*(a*B2*c2tof2*(1-l)+l*a*B2*r22)/(s21*(a*B1*c1tof2*(1-l)+l*a*B1*r12)+s22*(a*B2*c2tof2*(1-l)+l*a*B2*r22))

if(i == round(0.5*length(tset), 0))
{p2 <- 0.5*0.90 }


b1.set[i] <- B1 + dB1;n1.set[i] <- N1 + dN1;f1.set[i] <- F1 + dF1
b2.set[i] <- B2 + dB2;n2.set[i] <- N2 + dN2;f2.set[i] <- F2 + dF2;e.set[i] <- E - (dN1 + dN2)
  
c1f1.set[i]<- c1tof1.new;c1f2.set[i]<- c1tof2.new;c2f1.set[i]<- c2tof1.new;c2f2.set[i]<- c2tof2.new
f1n1.set[i]<- f1ton1.new;f1n2.set[i]<- f1ton2.new;f2n1.set[i]<- f2ton1.new;f2n2.set[i]<- f2ton2.new
}
fullroi_recovery.b1[j] = min(b1.set)
fullroi_recovery.n1[j] = min(n1.set)
fullroi_recovery.f1[j] = min(f1.set)
fullroi_recovery.b2[j] = min(b2.set)
fullroi_recovery.n2[j] = min(n2.set)
fullroi_recovery.f2[j] = min(f2.set)
}
```

```{r}
plot(x = primary.series, y = roiset.0, type = "l")
plot(x = primary.series, y = roiset.50, type = "l")
plot(x = primary.series, y = roiset.100, type = "l")

```

```{r}
steps = 8
part.increments = seq(0.5, 1, length.out = steps)
roi.increments = seq(0, 1, length.out = steps)


samset = tibble(
  partner.pref = part.increments, 
  roi.pref = roi.increments
)
samsetlong = samset %>% 
  expand.grid()
p.pref = as.vector(samsetlong$partner.pref)
r.pref = as.vector(samsetlong$roi.pref)

fullroi_recovery.symb = rep(NaN, length(p.pref))
fullroi_recovery.host = rep(NaN, length(p.pref))
fullroi_recovery.b2 = rep(NaN, length(p.pref))
fullroi_recovery.n2 = rep(NaN, length(p.pref))
fullroi_recovery.f2 = rep(NaN, length(p.pref))


for(j in 1:length(p.pref)){

primary.weight = p.pref[j] # how much preference each member of the network has for it's primary partner (e.g. Fungus 2's preference for Host 2)
#parameter values
tset = seq(from = 0, to = 5000, by = 0.01) # a timeseries to iterate over
a <- 0.25 # host allocation to symbiont
p1 <- .5 # host 1 photosynthetic rate
p2 <- p1 # host 2 photosynthetic rate
mB1 <- .15 # host 1 mortality
mB2 <- .15 # host 2 mortality
mN1 <- mB1 # host 1 nitrogen loss rate
mN2 <- mB2 # host 2 nitrogen loss rate
r11 <- primary.weight # preference of host 1 toward fungus 1
r12 <- 1-r11 # preference of host 1 toward fungus 2
r22 <- primary.weight # preference of host 2 toward fungus 2
r21 <- 1-r22 # preference of host 2 toward fungus 1
epsilon <- 0.15 # fungal conversion efficiency
mF1 <- 0.1 # fungus 1 mortality rate
mF2 <- mF1 # fungus 2 mortality rate
u1 <- .25 # fungus 1 uptake rate
u2 <- .25 # fungus 2 uptake rate
s11 <- primary.weight # preference of fungus 1 toward host 1
s12 <- 1-s11 # preference of fungus 1 toward host 2
s22 <- primary.weight # preference of fungus 2 toward host 2
s21 <- 1-s22 # preference of fungus 2 toward host 1
N0 <- 100 # total system nitrogen
l = r.pref[j] # percent of tree resources lost from ROI allocation


#holding vectors and initial conditions
b1.set = rep(NaN, length(tset)); b1.set[1] <- 50
b2.set = rep(NaN, length(tset)); b2.set[1] <- 50
n1.set = rep(NaN, length(tset)); n1.set[1] <- b1.set[1]*0.5
n2.set = rep(NaN, length(tset)); n2.set[1] <- b2.set[1]*0.5
f1.set = rep(NaN, length(tset)); f1.set[1] <- b1.set[1]*0.15
f2.set = rep(NaN, length(tset)); f2.set[1] <- b1.set[1]*0.15
e.set = rep(NaN, length(tset));  e.set[1]  <- 100 - n1.set[1]-n2.set[1]

#historical sharing percentages based on relative size of each 
c1f1.set = rep(NaN, length(tset)); c1f1.set[1] <- f1.set[1]/(f1.set[1]+f2.set[1])
c1f2.set = rep(NaN, length(tset)); c1f2.set[1] <- f2.set[1]/(f1.set[1]+f2.set[1])
c2f1.set = rep(NaN, length(tset)); c2f1.set[1] <- f1.set[1]/(f1.set[1]+f2.set[1])
c2f2.set = rep(NaN, length(tset)); c2f2.set[1] <- f2.set[1]/(f1.set[1]+f2.set[1])
f1n1.set = rep(NaN, length(tset)); f1n1.set[1] <- b1.set[1]/(b1.set[1]+b2.set[1])
f1n2.set = rep(NaN, length(tset)); f1n2.set[1] <- b2.set[1]/(b1.set[1]+b2.set[1])
f2n1.set = rep(NaN, length(tset)); f2n1.set[1] <- b1.set[1]/(b1.set[1]+b2.set[1])
f2n2.set = rep(NaN, length(tset)); f2n2.set[1] <- b2.set[1]/(b1.set[1]+b2.set[1])


for(i in 2:length(tset)){
  dt <- tset[i]-tset[i-1]
  B1 <- b1.set[i-1];  N1 <- n1.set[i-1]; F1 <- f1.set[i-1]
  B2 <- b2.set[i-1];  N2 <- n2.set[i-1];F2 <- f2.set[i-1]; E <- e.set[i-1]
  c1tof1 <- c1f1.set[i-1]; c1tof2 <- c1f2.set[i-1]; c2tof1 <- c2f1.set[i-1]; c2tof2 <- c2f2.set[i-1]
  f1ton1 <- f1n1.set[i-1]; f1ton2 <- f1n2.set[i-1]; f2ton1 <- f2n1.set[i-1]; f2ton2 <- f2n2.set[i-1]

  dB1 <- (p1 * N1 - (a + mB1)*B1)*dt
  dN1 <- (E*(u1*F1*f1ton1+u2*F2*f2ton1)-mN1*N1)*dt
  dB2 <- (p2 * N2 - (a + mB2)*B2)*dt
  dN2 <- (E*(u1*F1*f1ton2+u2*F2*f2ton2)-mN2*N2)*dt
  dF1 <- ((a*B1*c1tof1*(1-l)+l*a*B1*r11)*epsilon+(a*B2*c2tof1*(1-l)+l*a*B2*r21)*epsilon-mF1*F1)*dt
  dF2 <- ((a*B1*c1tof2*(1-l)+l*a*B1*r12)*epsilon+(a*B2*c2tof2*(1-l)+l*a*B2*r22)*epsilon-mF2*F2)*dt

c1tof1.new <- r11*u1*F1*s11*f1ton1/(r11*u1*F1*s11*f1ton1+r12*u2*F2*s21*f2ton1)
c1tof2.new <- r12*u2*F2*s21*f2ton1/(r11*u1*F1*s11*f1ton1+r12*u2*F2*s21*f2ton1)
c2tof1.new <- r21*u1*F1*s12*f1ton2/(r21*u1*F1*s12*f1ton2+r22*u2*F2*s22*f2ton2)
c2tof2.new <- r22*u2*F2*s22*f2ton2/(r21*u1*F1*s12*f1ton2+r22*u2*F2*s22*f2ton2)
f1ton1.new <- s11*(a*B1*c1tof1*(1-l)+l*a*B1*r11)/(s11*(a*B1*c1tof1*(1-l)+l*a*B1*r11)+s12*(a*B2*c2tof1*(1-l)+l*a*B2*r21))
f1ton2.new <- s12*(a*B2*c2tof1*(1-l)+l*a*B2*r21)/(s11*(a*B1*c1tof1*(1-l)+l*a*B1*r11)+s12*(a*B2*c2tof1*(1-l)+l*a*B2*r21))
f2ton1.new <- s21*(a*B1*c1tof2*(1-l)+l*a*B1*r12)/(s21*(a*B1*c1tof2*(1-l)+l*a*B1*r12)+s22*(a*B2*c2tof2*(1-l)+l*a*B2*r22))
f2ton2.new <- s22*(a*B2*c2tof2*(1-l)+l*a*B2*r22)/(s21*(a*B1*c1tof2*(1-l)+l*a*B1*r12)+s22*(a*B2*c2tof2*(1-l)+l*a*B2*r22))

if(i == round(0.5*length(tset), 0))
{p2 <- 0.5*0.90 }


b1.set[i] <- B1 + dB1;n1.set[i] <- N1 + dN1;f1.set[i] <- F1 + dF1
b2.set[i] <- B2 + dB2;n2.set[i] <- N2 + dN2;f2.set[i] <- F2 + dF2;e.set[i] <- E - (dN1 + dN2)
  
c1f1.set[i]<- c1tof1.new;c1f2.set[i]<- c1tof2.new;c2f1.set[i]<- c2tof1.new;c2f2.set[i]<- c2tof2.new
f1n1.set[i]<- f1ton1.new;f1n2.set[i]<- f1ton2.new;f2n1.set[i]<- f2ton1.new;f2n2.set[i]<- f2ton2.new
}
fullroi_recovery.b2[j] = min(b2.set)
fullroi_recovery.n2[j] = min(n2.set)
fullroi_recovery.f2[j] = min(f2.set)
fullroi_recovery.host[j] = min(b2.set+b1.set)
fullroi_recovery.symb[j] = min(f2.set+f1.set)
}
roi.sickness = samsetlong  %>% 
  rename(partner.preference = partner.pref) %>% 
  rename(ROI.strength = roi.pref) %>% 
  mutate(ROI.strength = 1-ROI.strength)%>% 
  mutate(b2 = fullroi_recovery.b2)%>% 
  mutate(n2 = fullroi_recovery.n2)%>% 
  mutate(f2 = fullroi_recovery.f2)%>% 
  mutate(hosts = fullroi_recovery.host)%>% 
  mutate(symbs = fullroi_recovery.symb)
```


```{r}

roi.sickness = roi.sickness %>% 
  mutate(highest_min = row_number(-b2))

ggplot(roi.sickness, aes(x = partner.preference, y = ROI.strength, fill = b2))+ geom_tile()+ 
  scale_fill_viridis(discrete=FALSE, option="plasma", name = "Min B1 size")
ggplot(roi.sickness, aes(x = partner.preference, y = ROI.strength, fill = b2))+ geom_tile()+ 
  scale_fill_viridis(discrete=FALSE, option="plasma", name = "Min B1 size")
ggplot(roi.sickness, aes(x = partner.preference, y = ROI.strength, fill = hosts))+ geom_tile()+ 
  scale_fill_viridis(discrete=FALSE, option="plasma", name = "Min B1 size")
ggplot(roi.sickness, aes(x = partner.preference, y = ROI.strength, fill = symbs))+ geom_tile()+ 
  scale_fill_viridis(discrete=FALSE, option="plasma", name = "Min B1 size")
```

```{r}
steps = 8
part.increments = seq(0.5, 1, length.out = steps)
roi.increments = seq(0, 1, length.out = steps)


samset = tibble(
  partner.pref = part.increments, 
  roi.pref = roi.increments
)
samsetlong = samset %>% 
  expand.grid()
p.pref = as.vector(samsetlong$partner.pref)
r.pref = as.vector(samsetlong$roi.pref)

fullroi_recovery.b1 = rep(NaN, length(p.pref))
fullroi_recovery.n1 = rep(NaN, length(p.pref))
fullroi_recovery.f1 = rep(NaN, length(p.pref))
fullroi_recovery.b2 = rep(NaN, length(p.pref))
fullroi_recovery.n2 = rep(NaN, length(p.pref))
fullroi_recovery.f2 = rep(NaN, length(p.pref))

for(j in 1:length(p.pref)){

primary.weight = p.pref[j] # how much preference each member of the network has for it's primary partner (e.g. Fungus 2's preference for Host 2)
#parameter values
tset = seq(from = 0, to = 5000, by = 0.01) # a timeseries to iterate over
a <- 0.25 # host allocation to symbiont
p1 <- .5 # host 1 photosynthetic rate
p2 <- p1 # host 2 photosynthetic rate
mB1 <- .15 # host 1 mortality
mB2 <- .15 # host 2 mortality
mN1 <- mB1 # host 1 nitrogen loss rate
mN2 <- mB2 # host 2 nitrogen loss rate
r11 <- primary.weight # preference of host 1 toward fungus 1
r12 <- 1-r11 # preference of host 1 toward fungus 2
r22 <- primary.weight # preference of host 2 toward fungus 2
r21 <- 1-r22 # preference of host 2 toward fungus 1
epsilon <- 0.15 # fungal conversion efficiency
mF1 <- 0.1 # fungus 1 mortality rate
mF2 <- mF1 # fungus 2 mortality rate
u1 <- .25 # fungus 1 uptake rate
u2 <- .25 # fungus 2 uptake rate
s11 <- primary.weight # preference of fungus 1 toward host 1
s12 <- 1-s11 # preference of fungus 1 toward host 2
s22 <- primary.weight # preference of fungus 2 toward host 2
s21 <- 1-s22 # preference of fungus 2 toward host 1
N0 <- 100 # total system nitrogen
l = r.pref[j] # percent of tree resources lost from ROI allocation


#holding vectors and initial conditions
b1.set = rep(NaN, length(tset)); b1.set[1] <- 50
b2.set = rep(NaN, length(tset)); b2.set[1] <- 50
n1.set = rep(NaN, length(tset)); n1.set[1] <- b1.set[1]*0.5
n2.set = rep(NaN, length(tset)); n2.set[1] <- b2.set[1]*0.5
f1.set = rep(NaN, length(tset)); f1.set[1] <- b1.set[1]*0.15
f2.set = rep(NaN, length(tset)); f2.set[1] <- b1.set[1]*0.15
e.set = rep(NaN, length(tset));  e.set[1]  <- 100 - n1.set[1]-n2.set[1]

#historical sharing percentages based on relative size of each 
c1f1.set = rep(NaN, length(tset)); c1f1.set[1] <- f1.set[1]/(f1.set[1]+f2.set[1])
c1f2.set = rep(NaN, length(tset)); c1f2.set[1] <- f2.set[1]/(f1.set[1]+f2.set[1])
c2f1.set = rep(NaN, length(tset)); c2f1.set[1] <- f1.set[1]/(f1.set[1]+f2.set[1])
c2f2.set = rep(NaN, length(tset)); c2f2.set[1] <- f2.set[1]/(f1.set[1]+f2.set[1])
f1n1.set = rep(NaN, length(tset)); f1n1.set[1] <- b1.set[1]/(b1.set[1]+b2.set[1])
f1n2.set = rep(NaN, length(tset)); f1n2.set[1] <- b2.set[1]/(b1.set[1]+b2.set[1])
f2n1.set = rep(NaN, length(tset)); f2n1.set[1] <- b1.set[1]/(b1.set[1]+b2.set[1])
f2n2.set = rep(NaN, length(tset)); f2n2.set[1] <- b2.set[1]/(b1.set[1]+b2.set[1])


for(i in 2:length(tset)){
  dt <- tset[i]-tset[i-1]
  B1 <- b1.set[i-1];  N1 <- n1.set[i-1]; F1 <- f1.set[i-1]
  B2 <- b2.set[i-1];  N2 <- n2.set[i-1];F2 <- f2.set[i-1]; E <- e.set[i-1]
  c1tof1 <- c1f1.set[i-1]; c1tof2 <- c1f2.set[i-1]; c2tof1 <- c2f1.set[i-1]; c2tof2 <- c2f2.set[i-1]
  f1ton1 <- f1n1.set[i-1]; f1ton2 <- f1n2.set[i-1]; f2ton1 <- f2n1.set[i-1]; f2ton2 <- f2n2.set[i-1]

  dB1 <- (p1 * N1 - (a + mB1)*B1)*dt
  dN1 <- (E*(u1*F1*f1ton1+u2*F2*f2ton1)-mN1*N1)*dt
  dB2 <- (p2 * N2 - (a + mB2)*B2)*dt
  dN2 <- (E*(u1*F1*f1ton2+u2*F2*f2ton2)-mN2*N2)*dt
  dF1 <- ((a*B1*c1tof1*(1-l)+l*a*B1*r11)*epsilon+(a*B2*c2tof1*(1-l)+l*a*B2*r21)*epsilon-mF1*F1)*dt
  dF2 <- ((a*B1*c1tof2*(1-l)+l*a*B1*r12)*epsilon+(a*B2*c2tof2*(1-l)+l*a*B2*r22)*epsilon-mF2*F2)*dt

c1tof1.new <- r11*u1*F1*s11*f1ton1/(r11*u1*F1*s11*f1ton1+r12*u2*F2*s21*f2ton1)
c1tof2.new <- r12*u2*F2*s21*f2ton1/(r11*u1*F1*s11*f1ton1+r12*u2*F2*s21*f2ton1)
c2tof1.new <- r21*u1*F1*s12*f1ton2/(r21*u1*F1*s12*f1ton2+r22*u2*F2*s22*f2ton2)
c2tof2.new <- r22*u2*F2*s22*f2ton2/(r21*u1*F1*s12*f1ton2+r22*u2*F2*s22*f2ton2)
f1ton1.new <- s11*(a*B1*c1tof1*(1-l)+l*a*B1*r11)/(s11*(a*B1*c1tof1*(1-l)+l*a*B1*r11)+s12*(a*B2*c2tof1*(1-l)+l*a*B2*r21))
f1ton2.new <- s12*(a*B2*c2tof1*(1-l)+l*a*B2*r21)/(s11*(a*B1*c1tof1*(1-l)+l*a*B1*r11)+s12*(a*B2*c2tof1*(1-l)+l*a*B2*r21))
f2ton1.new <- s21*(a*B1*c1tof2*(1-l)+l*a*B1*r12)/(s21*(a*B1*c1tof2*(1-l)+l*a*B1*r12)+s22*(a*B2*c2tof2*(1-l)+l*a*B2*r22))
f2ton2.new <- s22*(a*B2*c2tof2*(1-l)+l*a*B2*r22)/(s21*(a*B1*c1tof2*(1-l)+l*a*B1*r12)+s22*(a*B2*c2tof2*(1-l)+l*a*B2*r22))

if(i == round(0.5*length(tset), 0))
{dB2 <- -0.9*B2
 dN2 <- -0.9*N2}


b1.set[i] <- B1 + dB1;n1.set[i] <- N1 + dN1;f1.set[i] <- F1 + dF1
b2.set[i] <- B2 + dB2;n2.set[i] <- N2 + dN2;f2.set[i] <- F2 + dF2;e.set[i] <- E - (dN1 + dN2)
  
c1f1.set[i]<- c1tof1.new;c1f2.set[i]<- c1tof2.new;c2f1.set[i]<- c2tof1.new;c2f2.set[i]<- c2tof2.new
f1n1.set[i]<- f1ton1.new;f1n2.set[i]<- f1ton2.new;f2n1.set[i]<- f2ton1.new;f2n2.set[i]<- f2ton2.new
}

fullroi_recovery.b2[j] = max(tset)*(which(b2.set[round(0.5*length(tset),0):length(b2.set)] > 0.9999*b2.set[length(b2.set)])[1] )/length(tset)
fullroi_recovery.n2[j] = max(tset)*(which(n2.set[round(0.5*length(tset),0):length(n2.set)] > 0.9999*n2.set[length(n2.set)])[1] )/length(tset)
}
```

```{r}
roi.injury = samsetlong  %>% 
  rename(partner.preference = partner.pref) %>% 
  rename(ROI.strength = roi.pref) %>% 
  mutate(ROI.strength = 1-ROI.strength)%>% 
  mutate(b2 = fullroi_recovery.b2)%>% 
  mutate(n2 = fullroi_recovery.n2)%>% 
  mutate(fastest_recovery = row_number(b2))

ggplot(roi.injury, aes(x = partner.preference, y = ROI.strength, fill = b2))+ geom_tile()+ 
  scale_fill_viridis(discrete=FALSE, option="plasma", name = "Time to recovery")

```

```{r}
stress_response = roi.injury %>% 
  select(partner.preference, ROI.strength, fastest_recovery) %>% 
  left_join(roi.sickness %>% 
  select(partner.preference, ROI.strength, highest_min)) %>% 
  mutate(score = highest_min+fastest_recovery)

ggplot(stress_response, aes(x = partner.preference, y = ROI.strength, fill = score))+ geom_tile()+ 
  scale_fill_viridis(discrete=FALSE, option="plasma", name = "Lowest score wins")
```

